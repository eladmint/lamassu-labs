# TrustWrapper v3.0 PostgreSQL Cluster Configuration
# High-availability database cluster with replication

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-primary
  namespace: trustwrapper
  labels:
    app: postgres
    role: primary
spec:
  serviceName: postgres-primary-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
      role: primary
  template:
    metadata:
      labels:
        app: postgres
        role: primary
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: trustwrapper
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        - name: POSTGRES_REPLICATION_USER
          value: replicator
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: replication-password
        ports:
        - containerPort: 5432
          name: postgres
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: postgres-primary-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
          readOnly: true
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 15
          periodSeconds: 5
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
  volumeClaimTemplates:
  - metadata:
      name: postgres-primary-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast-ssd"
      resources:
        requests:
          storage: 100Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-replica
  namespace: trustwrapper
  labels:
    app: postgres
    role: replica
spec:
  serviceName: postgres-replica-service
  replicas: 2
  selector:
    matchLabels:
      app: postgres
      role: replica
  template:
    metadata:
      labels:
        app: postgres
        role: replica
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: PGUSER
          value: postgres
        - name: POSTGRES_DB
          value: trustwrapper
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        - name: POSTGRES_PRIMARY_HOST
          value: postgres-primary-service
        - name: POSTGRES_REPLICATION_USER
          value: replicator
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: replication-password
        ports:
        - containerPort: 5432
          name: postgres
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: postgres-replica-storage
          mountPath: /var/lib/postgresql/data
        - name: replica-setup
          mountPath: /docker-entrypoint-initdb.d/setup-replica.sh
          subPath: setup-replica.sh
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 5
      volumes:
      - name: replica-setup
        configMap:
          name: postgres-replica-config
          defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: postgres-replica-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast-ssd"
      resources:
        requests:
          storage: 100Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-primary-service
  namespace: trustwrapper
  labels:
    app: postgres
    role: primary
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: postgres
    role: primary

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-replica-service
  namespace: trustwrapper
  labels:
    app: postgres
    role: replica
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: postgres
    role: replica

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: trustwrapper
data:
  postgresql.conf: |
    # TrustWrapper optimized PostgreSQL configuration

    # Connection settings
    max_connections = 200
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 64MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1

    # Replication settings
    wal_level = replica
    max_wal_senders = 3
    max_replication_slots = 3
    hot_standby = on
    hot_standby_feedback = on

    # Performance tuning
    effective_io_concurrency = 200
    work_mem = 4MB
    min_wal_size = 1GB
    max_wal_size = 4GB

    # Logging
    log_statement = 'mod'
    log_min_duration_statement = 1000
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-replica-config
  namespace: trustwrapper
data:
  setup-replica.sh: |
    #!/bin/bash
    set -e

    # Wait for primary to be ready
    until pg_isready -h $POSTGRES_PRIMARY_HOST -p 5432 -U $POSTGRES_REPLICATION_USER; do
      echo "Waiting for primary database..."
      sleep 2
    done

    # Create base backup from primary
    pg_basebackup -h $POSTGRES_PRIMARY_HOST -D /var/lib/postgresql/data -U $POSTGRES_REPLICATION_USER -v -P -W

    # Configure recovery
    cat > /var/lib/postgresql/data/postgresql.auto.conf << EOF
    primary_conninfo = 'host=$POSTGRES_PRIMARY_HOST port=5432 user=$POSTGRES_REPLICATION_USER password=$POSTGRES_REPLICATION_PASSWORD'
    restore_command = 'cp /var/lib/postgresql/archive/%f %p'
    archive_cleanup_command = 'pg_archivecleanup /var/lib/postgresql/archive %r'
    EOF

    # Signal recovery mode
    touch /var/lib/postgresql/data/standby.signal

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: trustwrapper
type: Opaque
stringData:
  username: "trustwrapper_user"
  password: "REPLACE_WITH_SECURE_PASSWORD"
  replication-password: "REPLACE_WITH_REPLICATION_PASSWORD"
