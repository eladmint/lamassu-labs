# TrustWrapper v3.0 Kubernetes Secrets Template
# IMPORTANT: This is a template file. Actual secrets should be managed via CI/CD or sealed-secrets

apiVersion: v1
kind: Secret
metadata:
  name: trustwrapper-secrets
  namespace: trustwrapper
type: Opaque
stringData:
  # Database Configuration
  database-url: "postgresql://user:password@postgres-service:5432/trustwrapper"

  # Redis Configuration
  redis-url: "redis://redis-service:6379/0"

  # JWT Secret Key (Generate with: openssl rand -base64 32)
  jwt-secret: "REPLACE_WITH_ACTUAL_JWT_SECRET_KEY"

  # Blockchain API Keys (JSON format)
  blockchain-apis: |
    {
      "ethereum": {
        "alchemy": "REPLACE_WITH_ALCHEMY_API_KEY",
        "infura": "REPLACE_WITH_INFURA_API_KEY"
      },
      "cardano": {
        "blockfrost": "REPLACE_WITH_BLOCKFROST_API_KEY"
      },
      "solana": {
        "helius": "REPLACE_WITH_HELIUS_API_KEY",
        "quicknode": "REPLACE_WITH_QUICKNODE_API_KEY"
      },
      "bitcoin": {
        "blockcypher": "REPLACE_WITH_BLOCKCYPHER_API_KEY"
      },
      "polygon": {
        "alchemy": "REPLACE_WITH_POLYGON_ALCHEMY_KEY"
      }
    }

  # Oracle API Keys
  oracle-apis: |
    {
      "chainlink": "REPLACE_WITH_CHAINLINK_API_KEY",
      "band_protocol": "REPLACE_WITH_BAND_API_KEY",
      "api3": "REPLACE_WITH_API3_KEY"
    }

  # Monitoring and Observability
  monitoring-config: |
    {
      "prometheus_auth_token": "REPLACE_WITH_PROMETHEUS_TOKEN",
      "grafana_api_key": "REPLACE_WITH_GRAFANA_API_KEY",
      "datadog_api_key": "REPLACE_WITH_DATADOG_KEY"
    }

---
# Example of how to create secrets via kubectl (DO NOT COMMIT ACTUAL VALUES)
# kubectl create secret generic trustwrapper-secrets \
#   --namespace=trustwrapper \
#   --from-literal=database-url="postgresql://..." \
#   --from-literal=redis-url="redis://..." \
#   --from-literal=jwt-secret="$(openssl rand -base64 32)" \
#   --from-file=blockchain-apis=./blockchain-apis.json \
#   --from-file=oracle-apis=./oracle-apis.json
