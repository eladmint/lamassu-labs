# TrustWrapper v3.0 Redis Cluster Configuration
# High-availability Redis cluster for caching and session management

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: trustwrapper
  labels:
    app: redis
    component: cluster
spec:
  serviceName: redis-cluster-service
  replicas: 6
  selector:
    matchLabels:
      app: redis
      component: cluster
  template:
    metadata:
      labels:
        app: redis
        component: cluster
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - redis
              topologyKey: kubernetes.io/hostname
      containers:
      - name: redis
        image: redis:7.0-alpine
        ports:
        - containerPort: 6379
          name: client
        - containerPort: 16379
          name: gossip
        command:
        - redis-server
        args:
        - /etc/redis/redis.conf
        - --cluster-enabled
        - "yes"
        - --cluster-config-file
        - /data/nodes.conf
        - --cluster-node-timeout
        - "5000"
        - --appendonly
        - "yes"
        - --protected-mode
        - "no"
        - --bind
        - "0.0.0.0"
        - --port
        - "6379"
        - --cluster-announce-port
        - "6379"
        - --cluster-announce-bus-port
        - "16379"
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 15
          periodSeconds: 5
      volumes:
      - name: redis-config
        configMap:
          name: redis-cluster-config
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast-ssd"
      resources:
        requests:
          storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster-service
  namespace: trustwrapper
  labels:
    app: redis
    component: cluster
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: client
  - port: 16379
    targetPort: 16379
    protocol: TCP
    name: gossip
  selector:
    app: redis
    component: cluster

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: trustwrapper
  labels:
    app: redis
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
  selector:
    app: redis
    component: cluster

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cluster-config
  namespace: trustwrapper
data:
  redis.conf: |
    # TrustWrapper Redis Cluster Configuration

    # Network and Security
    bind 0.0.0.0
    protected-mode no
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300

    # General
    daemonize no
    supervised no
    pidfile /var/run/redis_6379.pid
    loglevel notice
    logfile ""
    databases 16

    # Persistence
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir ./

    # Append Only File
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    aof-load-truncated yes

    # Memory Management
    maxmemory 512mb
    maxmemory-policy allkeys-lru

    # Cluster Configuration
    cluster-enabled yes
    cluster-config-file nodes-6379.conf
    cluster-node-timeout 15000
    cluster-replica-validity-factor 10
    cluster-migration-barrier 1
    cluster-require-full-coverage yes

    # Performance Tuning
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    list-compress-depth 0
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    hll-sparse-max-bytes 3000

    # Client Output Buffer Limits
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit replica 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60

    # Slow Log
    slowlog-log-slower-than 10000
    slowlog-max-len 128

---
apiVersion: batch/v1
kind: Job
metadata:
  name: redis-cluster-init
  namespace: trustwrapper
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: redis-cluster-init
        image: redis:7.0-alpine
        command:
        - /bin/sh
        - -c
        - |
          # Wait for all Redis pods to be ready
          for i in $(seq 0 5); do
            until redis-cli -h redis-cluster-$i.redis-cluster-service.trustwrapper.svc.cluster.local ping; do
              echo "Waiting for redis-cluster-$i..."
              sleep 5
            done
          done

          # Create cluster
          redis-cli --cluster create \
            redis-cluster-0.redis-cluster-service.trustwrapper.svc.cluster.local:6379 \
            redis-cluster-1.redis-cluster-service.trustwrapper.svc.cluster.local:6379 \
            redis-cluster-2.redis-cluster-service.trustwrapper.svc.cluster.local:6379 \
            redis-cluster-3.redis-cluster-service.trustwrapper.svc.cluster.local:6379 \
            redis-cluster-4.redis-cluster-service.trustwrapper.svc.cluster.local:6379 \
            redis-cluster-5.redis-cluster-service.trustwrapper.svc.cluster.local:6379 \
            --cluster-replicas 1 \
            --cluster-yes

          echo "Redis cluster initialization completed"
