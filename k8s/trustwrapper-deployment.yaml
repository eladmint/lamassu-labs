# TrustWrapper v3.0 Kubernetes Deployment Configuration
# Universal Multi-Chain AI Verification Platform
# Production-ready deployment with auto-scaling and monitoring

apiVersion: apps/v1
kind: Deployment
metadata:
  name: trustwrapper-v3
  namespace: trustwrapper
  labels:
    app: trustwrapper
    version: v3.0
    component: api-gateway
    tier: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: trustwrapper
      version: v3.0
  template:
    metadata:
      labels:
        app: trustwrapper
        version: v3.0
        component: api-gateway
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: trustwrapper-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: trustwrapper-api
        image: trustwrapper/v3:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: TRUSTWRAPPER_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: trustwrapper-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: trustwrapper-secrets
              key: redis-url
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: trustwrapper-secrets
              key: jwt-secret
        - name: BLOCKCHAIN_API_KEYS
          valueFrom:
            secretKeyRef:
              name: trustwrapper-secrets
              key: blockchain-apis
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: config-volume
        configMap:
          name: trustwrapper-config
      - name: logs-volume
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: trustwrapper-service
  namespace: trustwrapper
  labels:
    app: trustwrapper
    version: v3.0
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: trustwrapper
    version: v3.0

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: trustwrapper-hpa
  namespace: trustwrapper
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: trustwrapper-v3
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: trustwrapper-service-account
  namespace: trustwrapper

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: trustwrapper-config
  namespace: trustwrapper
data:
  app.yaml: |
    trustwrapper:
      api:
        host: "0.0.0.0"
        port: 8000
        workers: 4
        timeout: 30
      blockchain:
        ethereum:
          network: "mainnet"
          timeout: 15
        cardano:
          network: "mainnet"
          timeout: 20
        solana:
          network: "mainnet-beta"
          timeout: 10
      security:
        jwt_expire_hours: 24
        rate_limit_per_minute: 1000
        max_request_size: 10485760
      monitoring:
        enable_metrics: true
        log_level: "info"
        health_check_interval: 30
